---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const posts = (await getCollection('blog')).sort(
(b, a) => {
  // First, sort by featured status
  if (a.data.featured && !b.data.featured) {
    return 1;
  }
  if (!a.data.featured && b.data.featured) {
    return -1;
  }
  return a.data.pubDate.valueOf() - b.data.pubDate.valueOf();
}
);

// Collect unique tags from all posts
const uniqueTags = new Set();
posts.forEach(post => {
  if (post.data.tags) {
    post.data.tags.forEach(tag => uniqueTags.add(tag));
  }
});

// Convert Set to Array for easier use later
const tagsArray = Array.from(uniqueTags);
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main {
				padding-top: 30px;
				width: 960px;
			}
			ul {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			ul li {
				width: calc(50% - 1rem);
			}
			ul li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			ul li:first-child .date-and-tags {
				justify-content: center;
			}
			ul li:first-child {
				width: 100%;
				margin-bottom: 1rem;
				text-align: center;
			}
			ul li:first-child img {
				width: 100%;
			}
			ul li:first-child .title {
				font-size: 2.369rem;
			}
			ul li img {
				margin-bottom: 0.5rem;
				border-radius: 12px;
			}
			ul li a {
				display: block;
			}
			.first-child{
				width: 100%;
				margin-bottom: 1rem;
				text-align: center;
				justify-content: center;
			}
			.title {
				margin: 0;
				color: rgb(var(--black));
				line-height: 1;
			}
			.date {
				/* margin-right: 20; */
				color: rgb(var(--gray));
				padding: 0.2em 0.4em; /* Ensuring even padding to make them the same height */
  				margin-right: 0.5em;
				padding-left: 0;
				margin-left: 0;
			}
			ul li a:hover h4,
			ul li a:hover .date {
				color: rgb(var(--accent));
			}
			ul a:hover img {
				box-shadow: var(--box-shadow);
			}
			.date-and-tags {
				display: flex;
				align-items: center;
				color: rgb(var(--gray));
				justify-content: space-between; /* Left-align by default */
				margin-bottom: 10px;
			}
			.tag-container {
				display: flex;
				align-items: center;
			}
			.tag{
				color: rgb();
				display: flex;
				/* margin-bottom: 0.5em; */
				padding: 0.2em 0.4em; /* Ensuring even padding to make them the same height */
 				margin-right: 0.5em;
				background-color: #f3f3f3;  /* Light gray background */
				color: #333;  /* Dark gray text */
				border-radius: 4px;  /* Rounded corners */
				margin-left: 0.5em;
				/* margin: 4px */
			}
			.postData{
				display: flex;
				align-items: center;
				flex-wrap: wrap;
				flex-direction: row;
				align-content: space-between;
				justify-content: left;
				color: rgb(var(--gray));
				flex-direction: column;
			}
			#tagFilterButtons{
				margin-bottom: 20px;
			}
			.tagButton {
				padding: 0.2em 0.4em;
				background-color: #e8e8e8;
				color: #333;
				border-radius: 4px;
				border: none;
				cursor: pointer;
				margin-right: 0.5em;
				margin-bottom: 0.5em;
				/* width: 100px; */
				/* height: 50px; */
				font-weight: 500;
				font-size: 20pt;
			}

			.tagButton.selected {
				/* background-color: #ccc; Darken the background when selected */
				background-color: #e8e8e8;
				color: var(--accent);
				box-shadow: var(--box-shadow);
			}

			.tagButton[data-tag="all"] {
				margin-right: 1em; /* Optionally add more margin to the 'All' button */
			}
			.divider{
				border-bottom: 1px dashed #bcbcbc;
			}
			@media (max-width: 720px) {
				ul {
					gap: 0.5em;
				}
				ul li {
					width: 100%;
					text-align: center;
					justify-content: center;
				}
				ul li:first-child {
					margin-bottom: 0;
				}
				ul li:first-child .title {
					font-size: 1.563em;
				}
				ul li .postData{
					justify-content: center;
				}
				.date-and-tags {
					justify-content: center; /* Center-align date and tags on small screens */
				}
				.tagButton{
					padding: 6px 8px;
					margin-right: 6px;
					font-size: 18px;
				}
			}

			@media (min-width: 720px) {
				.tag-container {
					display: flex;
					align-items: center;
					height: 100%;
				}

				.date, .tag {
					display: flex;
					align-items: center;
					height: 100%; /* Make sure date and tags have the same height */
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<section>

				<div id="tagFilterButtons">
					<button id="tagButton-all" class="tagButton selected" data-tag="all">#all</button>
					{tagsArray.map((tag: string) => (
					<button class="tagButton" data-tag={tag}>#{tag}</button>
					))}
				</div>
				<hr class="divider">
				<ul>
					{
						posts.map((post) => (
							<li>
								<a href={`/blog/${post.slug}/`}>
									<img src={post.data.heroImage} alt="" />
									<h4 class="title">{post.data.title}</h4>
									 
									<div class="date-and-tags">
										<div class="date">
											<FormattedDate date={post.data.pubDate} />
										</div>
										<div class="tag-container">
											{post.data.tags.map((tag) => (
											<div class="tag">
												#{tag}
											</div>
											))}
										</div>
									</div>
										
								</a>
							</li>
						))
					}
				</ul>
			</section>
		</main>
		<Footer />
		<script>
			document.addEventListener("DOMContentLoaded", function() {

				// new goes here

				function updateFirstPostClass() {
					// Remove any existing "first-child" class
					const existingFirst = document.querySelector(".first-child");
					if (existingFirst) {
						existingFirst.classList.remove("first-child");
						const existingDateAndTags = existingFirst.querySelector(".date-and-tags");
						if (existingDateAndTags) {
						existingDateAndTags.style.justifyContent = 'space-between';
						}
					}

					// Add the "first-child" class to the first visible li
					const posts = Array.from(document.querySelectorAll("li"));
					const firstVisiblePost = posts.find(post => post.style.display !== "none");
					if (firstVisiblePost) {
						firstVisiblePost.classList.add("first-child");
						const dateAndTags = firstVisiblePost.querySelector(".date-and-tags");
						if (dateAndTags) {
						dateAndTags.style.justifyContent = 'center';
						}
					}
				}

					// old and working
				const filterButtons = document.querySelectorAll(".tagButton");
				const allTagButton = document.getElementById("tagButton-all");

				function updatePosts() {
					const selectedTags = Array.from(filterButtons)
					.filter(btn => btn.classList.contains("selected"))
					.map(btn => btn.dataset.tag);

					localStorage.setItem('selectedTags', JSON.stringify(selectedTags));
					
					const posts = Array.from(document.querySelectorAll("li"));
					posts.forEach(post => {
					const postTags = Array.from(post.querySelectorAll(".tag")).map(tagEl => tagEl.textContent.trim().substring(1));
					if (selectedTags.includes("all") || selectedTags.some(tag => postTags.includes(tag))) {
						post.style.display = "";
					} else {
						post.style.display = "none";
					}
					});

					if (window.innerWidth > 720) {updateFirstPostClass();}
				}

				// Load tags from localStorage and set the selected tags or default to "all"
				const savedTags = JSON.parse(localStorage.getItem('selectedTags') || '["all"]');
				
				filterButtons.forEach(b => b.classList.remove("selected")); // Remove selected from all first

				savedTags.forEach(tag => {
					const btn = document.querySelector(`.tagButton[data-tag="${tag}"]`);
					if (btn) btn.classList.add("selected");
				});

				// Initialize the filter
				updatePosts();

				filterButtons.forEach(btn => {
					btn.addEventListener("click", function() {
					if (this.dataset.tag === "all") {
						filterButtons.forEach(b => b.classList.remove("selected"));
						this.classList.add("selected");
					} else {
						allTagButton.classList.remove("selected");
						this.classList.toggle("selected");

						if (!Array.from(filterButtons).some(b => b.classList.contains("selected"))) {
						allTagButton.classList.add("selected");
						}
					}

					updatePosts();
					});
				});
				});

		  </script>
		  </script>
	</body>
</html>
